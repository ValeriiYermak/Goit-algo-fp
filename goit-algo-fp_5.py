"""
–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –∫–æ–¥ —ñ–∑ –∑–∞–≤–¥–∞–Ω–Ω—è 4 –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ –±—ñ–Ω–∞—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞, –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º—É –Ω–∞ Python, —è–∫–∞ –≤—ñ–∑—É–∞–ª—ñ–∑—É—î
–æ–±—Ö–æ–¥–∏ –¥–µ—Ä–µ–≤–∞: —É –≥–ª–∏–±–∏–Ω—É —Ç–∞ –≤ —à–∏—Ä–∏–Ω—É.
–í–æ–Ω–∞ –ø–æ–≤–∏–Ω–Ω–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏ –∫–æ–∂–µ–Ω –∫—Ä–æ–∫ —É –≤—É–∑–ª–∞—Ö –∑ —Ä—ñ–∑–Ω–∏–º–∏ –∫–æ–ª—å–æ—Ä–∞–º–∏, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ 16-—Å–∏—Å—Ç–µ–º—É RGB (–ø—Ä–∏–∫–ª–∞–¥ #1296F0).
–ö–æ–ª—å–æ—Ä–∏ –≤—É–∑–ª—ñ–≤ –º–∞—é—Ç—å –∑–º—ñ–Ω—é–≤–∞—Ç–∏—Å—è –≤—ñ–¥ —Ç–µ–º–Ω–∏—Ö –¥–æ —Å–≤—ñ—Ç–ª–∏—Ö –≤—ñ–¥—Ç—ñ–Ω–∫—ñ–≤, –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—Å—Ç—ñ –æ–±—Ö–æ–¥—É. –ö–æ–∂–µ–Ω –≤—É–∑–æ–ª –ø—Ä–∏ –π–æ–≥–æ
–≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–Ω—ñ –º–∞—î –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–æ–ª—ñ—Ä, —è–∫–∏–π –≤—ñ–∑—É–∞–ª—å–Ω–æ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î –ø–æ—Ä—è–¥–æ–∫ –æ–±—Ö–æ–¥—É.

üëâüèª –ü—Ä–∏–º—ñ—Ç–∫–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Å—Ç–µ–∫ —Ç–∞ —á–µ—Ä–≥—É, –ù–ï —Ä–µ–∫—É—Ä—Å—ñ—é
"""
import uuid
import networkx as nx
import matplotlib.pyplot as plt
import colorsys
from collections import deque

from openpyxl.styles.builtins import title


class Node:
    def __init__(self, key, color="skyblue"):
        self.left = None
        self.right = None
        self.val = key
        self.color = color
        self.id = str(uuid.uuid4())


def add_edges(graph, node, pos, x=0, y=0, layer=1):
    if node is not None:
        graph.add_node(node.id, color=node.color, label=node.val)
        if node.left:
            graph.add_edge(node.id, node.left.id)
            l = x - 1 / 2 ** layer
            pos[node.left.id] = (l, y - 1)
            add_edges(graph, node.left, pos, x=l, y=y - 1, layer=layer + 1)
        if node.right:
            graph.add_edge(node.id, node.right.id)
            r = x + 1 / 2 ** layer
            pos[node.right.id] = (r, y - 1)
            add_edges(graph, node.right, pos, x=r, y=y - 1, layer=layer + 1)
    return graph


def draw_tree(tree_root, highlight=None, interactive=False, title="Binary Tree Visualization"):
    """
    –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–µ—Ä–µ–≤–∞. –Ø–∫—â–æ interactive=True, –æ–Ω–æ–≤–ª—é—î –≥—Ä–∞—Ñ—ñ–∫ —É —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ.
    """
    tree = nx.DiGraph()
    pos = {tree_root.id: (0, 0)}
    tree = add_edges(tree, tree_root, pos)

    colors = [highlight.get(node[0], node[1]['color']) for node in tree.nodes(data=True)]
    labels = {node[0]: node[1]['label'] for node in tree.nodes(data=True)}

    plt.clf()  # –û—á–∏—â–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –≥—Ä–∞—Ñ—ñ–∫–∞
    plt.title(title) # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
    nx.draw(tree, pos=pos, labels=labels, arrows=False, node_size=500, node_color=colors)

    if interactive:
        plt.pause(0.5)  # –ö–æ—Ä–æ—Ç–∫–∞ –ø–∞—É–∑–∞ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞
    else:
        plt.show()


def build_tree_from_heap(heap):
    if not heap:
        return None

    nodes = [Node(key) for key in heap]
    for i in range(len(heap)):
        left_index = 2 * i + 1
        right_index = 2 * i + 2

        if left_index < len(heap):
            nodes[i].left = nodes[left_index]

        if right_index < len(heap):
            nodes[i].right = nodes[right_index]

    return nodes[0]


def generate_colors(n):
    """–ì–µ–Ω–µ—Ä—É—î –≥—Ä–∞–¥—ñ—î–Ω—Ç –∫–æ–ª—å–æ—Ä—ñ–≤ –≤—ñ–¥ —Ç–µ–º–Ω–æ–≥–æ –¥–æ —Å–≤—ñ—Ç–ª–æ–≥–æ."""
    colors = []
    for i in range(n):
        hue = i / n
        lightness = 0.4 + 0.4 * (i / n)  # –í—ñ–¥ 40% –¥–æ 80% —è—Å–∫—Ä–∞–≤–æ—Å—Ç—ñ
        rgb = colorsys.hls_to_rgb(hue, lightness, 1)
        colors.append(f'#{int(rgb[0] * 255):02x}{int(rgb[1] * 255):02x}{int(rgb[2] * 255):02x}')
    return colors


def dfs(tree_root):
    """–û–±—Ö—ñ–¥ –≤ –≥–ª–∏–±–∏–Ω—É –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º —Å—Ç–µ–∫–∞."""
    if not tree_root:
        return

    plt.ion()  # –£–≤—ñ–º–∫–Ω—É—Ç–∏ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —Ä–µ–∂–∏–º
    stack = [tree_root]
    visited = []
    colors = generate_colors(len(binary_heap))
    highlight = {}

    step = 0
    while stack:
        node = stack.pop()
        if node:
            visited.append(node.val)
            highlight[node.id] = colors[step]
            step += 1
            draw_tree(tree_root, highlight, interactive=True, title="Binary Tree Visualization DFS")

            # –î–æ–¥–∞—î–º–æ –ø—Ä–∞–≤–∏–π —ñ –ª—ñ–≤–∏–π –≤—É–∑–ª–∏ –≤ —Å—Ç–µ–∫ (–ø—Ä–∞–≤–∏–π –¥–æ–¥–∞—î—Ç—å—Å—è –ø–µ—Ä—à–∏–º, —â–æ–± –ª—ñ–≤–∏–π –±—É–≤ –Ω–∞ –≤–µ—Ä—à–∏–Ω—ñ)
            if node.right:
                stack.append(node.right)
            if node.left:
                stack.append(node.left)
    plt.ioff()  # –í–∏–º–∫–Ω—É—Ç–∏ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —Ä–µ–∂–∏–º
    plt.show()


def bfs(tree_root):
    """–û–±—Ö—ñ–¥ –≤ —à–∏—Ä–∏–Ω—É –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º —á–µ—Ä–≥–∏."""
    if not tree_root:
        return

    plt.ion()  # –£–≤—ñ–º–∫–Ω—É—Ç–∏ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —Ä–µ–∂–∏–º
    queue = deque([tree_root])
    visited = []
    colors = generate_colors(len(binary_heap))
    highlight = {}

    step = 0
    while queue:
        node = queue.popleft()
        if node:
            visited.append(node.val)
            highlight[node.id] = colors[step]
            step += 1
            draw_tree(tree_root, highlight, interactive=True, title="Binary Tree Visualization BFS")

            # –î–æ–¥–∞—î–º–æ –ª—ñ–≤–∏–π —ñ –ø—Ä–∞–≤–∏–π –≤—É–∑–ª–∏ –≤ —á–µ—Ä–≥—É
            if node.left:
                queue.append(node.left)
            if node.right:
                queue.append(node.right)
    plt.ioff()  # –í–∏–º–∫–Ω—É—Ç–∏ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —Ä–µ–∂–∏–º
    plt.show()


# –ü—Ä–∏–∫–ª–∞–¥ –±—ñ–Ω–∞—Ä–Ω–æ—ó –∫—É–ø–∏
binary_heap = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
heap_tree_root = build_tree_from_heap(binary_heap)

print("–û–±—Ö—ñ–¥ —É –≥–ª–∏–±–∏–Ω—É (DFS):")
dfs(heap_tree_root)

print("\n–û–±—Ö—ñ–¥ —É —à–∏—Ä–∏–Ω—É (BFS):")
bfs(heap_tree_root)

